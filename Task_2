import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
# Generating sample data
np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Plotting the generated data
plt.scatter(X, y)
plt.title("Generated Data")
plt.xlabel("X")
plt.ylabel("y")
plt.show()
# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
#training the linear regression model
lin_reg=LinearRegression()
lin_reg.fit(X_train,y_train)

# Polynomial Regression (degree=2)
poly_reg = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
poly_reg.fit(X_train, y_train)


# Making predictions on the training and test sets
y_train_pred = lin_reg.predict(X_train)
y_test_pred = lin_reg.predict(X_test)

# Calculating performance metrics
mse_train = mean_squared_error(y_train, y_train_pred)
mse_test = mean_squared_error(y_test, y_test_pred)
r2_train = r2_score(y_train, y_train_pred)
r2_test = r2_score(y_test, y_test_pred)

print(f"Train Mean Squared Error: {mse_train}")
print(f"Test Mean Squared Error: {mse_test}")
print(f"Train R-squared: {r2_train}")
print(f"Test R-squared: {r2_test}")

'''this section of code displays linear as well as polyomial regression lines.
# Function to plot regression lines
def plot_regression_lines(model, X_train, y_train, label):
    X_range = np.linspace(0, 2, 100).reshape(-1, 1)
    plt.scatter(X_train, y_train, color='blue', label='Training data')
    plt.plot(X_range, model.predict(X_range), color='red', linewidth=2, label=label)
    plt.title("Regression Line")
    plt.xlabel("X")
    plt.ylabel("y")
    plt.legend()
    plt.show()

# Plotting regression lines
plot_regression_lines(lin_reg, X_train, y_train, 'Linear Regression')
plot_regression_lines(poly_reg, X_train, y_train, 'Polynomial Regression (Degree=2)')'''

# Plotting the regression line on the training data
plt.scatter(X_train, y_train, color='blue', label='Training data')
plt.plot(X_train, y_train_pred, color='red', linewidth=2, label='Regression line')
plt.title("Regression Line on Training Data")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()
plt.show()

# Plotting actual vs. predicted values
plt.scatter(X_test, y_test, color='blue', label='Actual values')
plt.scatter(X_test, y_test_pred, color='red', label='Predicted values')
plt.title("Actual vs Predicted Values on Test Data")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()
plt.show()

# Cross-validation scores
cv_scores = cross_val_score(poly_reg, X, y, cv=5, scoring='r2')
print(f"Cross-Validation R-squared Scores: {cv_scores}")
print(f"Mean Cross-Validation R-squared: {np.mean(cv_scores):.3f}")
